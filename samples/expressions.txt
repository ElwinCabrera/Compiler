{
    [ int : x, y ]

    (*
        We are mostly looking at what happens after the
        assign op here. That is the "expression" reduction
     *)

    (* An expression can be a constant *)
    x := 7;

    (* An expression can be any assignable *)
    x := y;

    (* An expression can be parenthesized *)
    x := (y);

    (* The parentheses can be nested *)
    x := ((y));

    (* Unary operators applied to expression are expression 
    x := -7;
    x := y isNull;
    x := (y isNull);
    x := (((-7) isNull));

    *)

    (* All binary operations on expressions are expressions *)

    x := 7 + 7;
    x := 7 - 7;
    x := 7 * 7;
    x := 7 / 7;
    x := 7 % 7;
    x := 7 & 7;
    x := 7 | 7;
    x := 7 < 7;
    x := (7) = 7;
    x := -(7) = 7;
    x := (-x) = 7;
    x := -(4 * 4);

    (* Even when they are parenthesized *)
    
    x := (7 = (7));


    (* Or laid out in sequence *)
    x := 7 = 7 = 7 = 7;

    x := y isNull = z isNull;
    x := (y isNull = z isNull);
    x := (!(y isNull) = ((!(z) isNull))) = true | false & true;


}