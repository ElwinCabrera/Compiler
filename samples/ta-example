(* Below is the definition-list section of the program. All types and functions
   will be defined here *)

(* This is a record type definition *)
type record : [ integer: i; real: r; string: id, s ]

(* This is an array type definition for an array with 2 dimensions *)
type intArray : 2 -> integer

(* This is a single dimensional array type definition with an initial value *)
type stringArray : 1 -> string : ( "hello" )

(* This is a function type definition with one parameter *)
type real2int : ( real: r ) -> integer

(* This is a function type definition with multiple parameters *)
type getIntArray : ( integer: p00, integer: p01, integer: p10, integer: p11 )
                 -> intArray

(* Functions with no input parameters are also valid. *)
type noInput : ( ) -> string

(* This is a simple function definition *)
function getInt: real2int {
   (* An explicit conversion is needed here. *)
   getInt := r2i r;
}

(* This is a slightly more complex function definition *)
function initializeIntArray: getIntArray {
   [ intArray: ia ]
   (* Reserving an array of a specific size for each dimension *)
   reserve ia(2,2);
   (* Placing values into each position of the array *)
   ia(0, 0) := p00;
   ia(0, 1) := p01;
   ia(1, 0) := p10;
   ia(1, 1) := p11;
   initializeIntArray := ia;
}

(* Simple function with no input, returning a string. *)
function sayHello : noInput {
   sayHello := "Hello!";
}

(* Below is the main sblock of the program. This has to be here, and cannot be
   empty *)
{ (* The dblock for variables used throughout the entire scope of the main
     program is given below this *)
 [ integer: i, x; string: s, s1; real: r, r1; Boolean: b, b1; character: c, c1;
   record: rec, rec1; intArray: ia, ia1; stringArray: sa ]

   (* Reserve space on the heap for the record rec *)
   reserve rec;

   (* Using one of the functions defined above *)
   ia := initializeIntArray(1, 2, 3, 4);

   { (* This creates an inner scope. Variables from the parent/outer scope can
        still be accessed in here, or variables of the same name may be
        declared again of a different type in here for use in this scope. *)
    [ real: x := 2.2 ]
      (* Below is a for statement *)
      for(i := - 1 ;; i < 9; i := i + 1;){
         (* 2 would implicitly be converted to the real value 2.0 *)
         x := x - 2 * 10 / 5;
      }
   }

   (* Below is a switch/case/otherwise statement. The switch expression must be
      a integer expression. All cases must be integer constants. You must have
      at least one case. *)
   switch ( i % 2 )
      case 1: {
         c := 'a';
         (* An explicit conversion is needed here. *)
         r := i2r i;
      }
      case 2: {
         c := 'b';
         r := 5.7;
      }
      otherwise: {
         c := 'c';
         r := 0.0;
      }

   (* A simple assignment statement. *)
   b := false;

   (* Calling function sayHello with no arguments. *)
   s := sayHello();

   (* Below is an if/then/else statement. The else is required. The expression
      must be a Boolean expression. *)
   if ( true | false & b = true )
   then {
      (* Values assigned to record elements i and s *)
      rec.i := 15;
      rec.s := "then";
   }
   else {
      (* Values assigned to record elements r and id *)
      rec.r := 1.5;
      rec.id := "else";
   }

   (* Below is a while statement. The expression used must be Boolean. This
      expression uses the postUnaryOperator 'isNull', which can only be used
      with record and array types. *)
   while( !(rec.i isNull) ){
      rec.i := getInt(rec.r);
   }

   (* Release the record rec and intArray ia *)
   release rec;
   release ia;
}
